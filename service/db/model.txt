package user

import (
	"commonapi/config"
	"fmt"
	"time"

	"gorm.io/gorm"
)

type User struct {
	ID int `json:"id"  gorm:"column:id;primary_key;auto_increment;comment:'主键'"`

	Username string    `json:"username"`
	Password string    `json:"password"`
	Email    string    `json:"email"`
	Blocked  bool      `json:"blocked"`
	LoginAt  time.Time `json:"login_at"`
    ///////// hooks start
    func (o *User) BeforeSave(tx *gorm.DB) error   { return nil }
    func (o *User) BeforeCreate(tx *gorm.DB) error { return nil }
	CreatedAt time.Time  `json:"created_at" gorm:"column:created_at;comment:'创建时间'"`
	UpdateAt  time.Time  `json:"updated_at" gorm:"column:updated_at;comment:'更新时间'"`
	DeletedAt *time.Time `json:"-" gorm:"column:deleted_at;comment:'删除时间'"`
}

// TableName 表名
func (o *User) TableName() string {
	return "user"
}

///////// hooks start
func (o *User) BeforeSave(tx *gorm.DB) error   { return nil }
func (o *User) BeforeCreate(tx *gorm.DB) error { return nil }
func (o *User) AfterCreate(tx *gorm.DB) error  { return nil }
func (o *User) AfterSave(tx *gorm.DB) error    { return nil }
func (o *User) BeforeUpdate(tx *gorm.DB) error { return nil }
func (o *User) AfterUpdate(tx *gorm.DB) error  { return nil }
func (o *User) BeforeDelete(tx *gorm.DB) error { return nil }
func (o *User) AfterDelete(tx *gorm.DB) error  { return nil }
func (o *User) AfterFind(tx *gorm.DB) error    { return nil }

///////// hooks end

///////// CRUD start
// Add 新增
func (*User) Add(o *User, tx ...*gorm.DB) (*User, error) {
	db := config.MYSQL
	if len(tx) > 0 {
		db = tx[0]
	}
	o.CreatedAt = time.Now()
	o.UpdateAt = o.CreatedAt
	err := db.Create(o).Error
	if err != nil {
		return nil, err
	}
	return o, nil
}

// Update 修改
func (*User) Update(o *User, tx ...*gorm.DB) (*User, error) {
	db := config.MYSQL
	if len(tx) > 0 {
		db = tx[0]
	}
	err := db.Model(&User{}).Where("id = ?", o.ID).Updates(o).Error
	// err := db.Model(&User{}).Where("id = ?", o.ID).Save(o).Error
	if err != nil {
		return nil, err
	}
	return o, nil
}

// Count 查询数量
func (*User) Count(cond *config.Condition, tx ...*gorm.DB) (int64, error) {
	db := config.MYSQL
	if len(tx) > 0 {
		db = tx[0]
	}
	var count int64
	db = db.Debug().Model(&User{})
	db = db.Where("deleted_at is null")
	for _, v := range cond.Wheres {
		switch v.Method {
		case config.GT:
			db = db.Where(v.Field+" > ? ", v.Value)
		case config.GTE:
			db = db.Where(v.Field+" >= ? ", v.Value)
		case config.LT:
			db = db.Where(v.Field+" < ? ", v.Value)
		case config.LTE:
			db = db.Where(v.Field+" <= ? ", v.Value)
		case config.EQ:
			db = db.Where(v.Field+" = ? ", v.Value)
		case config.CONTAINS:
			db = db.Where(v.Field + " like '%" + v.Value + "%' ")
		}
	}
	err := db.Count(&count).Error
	if err != nil {
		return 0, err
	}
	return 0, nil
}

// Count 查询列表
func (*User) List(cond *config.Condition, tx ...*gorm.DB) ([]*User, error) {
	var datas = make([]*User, 0)
	db := config.MYSQL
	if len(tx) > 0 {
		db = tx[0]
	}
	db = db.Model(&User{})
	db = db.Where("deleted_at is null")
	// 条件
	for _, v := range cond.Wheres {
		switch v.Method {
		case config.GT:
			db = db.Where(v.Field+" > ? ", v.Value)
		case config.GTE:
			db = db.Where(v.Field+" >= ? ", v.Value)
		case config.LT:
			db = db.Where(v.Field+" < ? ", v.Value)
		case config.LTE:
			db = db.Where(v.Field+" <= ? ", v.Value)
		case config.EQ:
			db = db.Where(v.Field+" = ? ", v.Value)
		case config.CONTAINS:
			db = db.Where(v.Field + " like '%" + v.Value + "%' ")
		}
	}

	// 排序
	for _, v := range cond.Sorts {
		db = db.Order(fmt.Sprintf(" %s %s ", v.Field, v.Value))
	}

	// 分页
	db = db.Offset((cond.Page - 1) * cond.PageSize).Limit(cond.PageSize)

	// 查询
	err := db.Find(&datas).Error
	if err != nil {
		return nil, err
	}
	return datas, nil
}

// GetItemByID 根据id查询
func (*User) GetItemByID(id int, tx ...*gorm.DB) (*User, error) {
	db := config.MYSQL
	if len(tx) > 0 {
		db = tx[0]
	}
	var rec = User{}
	db = db.Model(&User{})
	db = db.Where("deleted_at is null")
	err := db.Where("id = ?", id).First(&rec).Error
	return &rec, err
}

// Delete 删除
func (*User) Delete(id int, tx ...*gorm.DB) error {
	db := config.MYSQL
	if len(tx) > 0 {
		db = tx[0]
	}
	err := db.Model(&User{}).Where("id = ?", id).Update("deleted_at", time.Now()).Error
	// err := db.Delete(&User{}, id).Error

	if err != nil {
		return err
	}
	return nil
}

///////// CRUD end
