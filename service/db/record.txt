package db

import (
	"commonapi/config"
	"fmt"
	"time"

	"gorm.io/gorm"
)

/*
创建日期: 2022-07-29 22:58:40

Recod的删除策略为: 真实删除/软删除
Recod的更新策略为: 更新所有字段(即使字段是零值)/更新非零值(非空)的字段

*/

// Record Record
type Record struct {
	ID      int    `json:"id"  gorm:"column:id;primary_key;auto_increment;comment:'主键'"`
	Status  int    `json:"status" gorm:"column:status;comment:'视频编号'"`
	Name    string `json:"name"  gorm:"column:name;comment:'观看时长'"`
	Content string `json:"content"  gorm:"column:content;comment:'观看时长'"`

	CreatedAt time.Time  `json:"created_at"  gorm:"column:created_at;comment:'创建时间'"`
	UpdateAt  time.Time  `json:"updated_at"  gorm:"column:updated_at;comment:'更新时间'"`
	DeletedAt *time.Time `json:"-"  gorm:"column:deleted_at;comment:'删除时间'"`
}

// TableName 表名
func (o *Record) TableName() string {
	return "a"
}

///////// hooks start
func (o *Record) BeforeSave(tx *gorm.DB) error   { return nil }
func (o *Record) BeforeCreate(tx *gorm.DB) error { return nil }
func (o *Record) AfterCreate(tx *gorm.DB) error  { return nil }
func (o *Record) AfterSave(tx *gorm.DB) error    { return nil }
func (o *Record) BeforeUpdate(tx *gorm.DB) error { return nil }
func (o *Record) AfterUpdate(tx *gorm.DB) error  { return nil }
func (o *Record) BeforeDelete(tx *gorm.DB) error { return nil }
func (o *Record) AfterDelete(tx *gorm.DB) error  { return nil }
func (o *Record) AfterFind(tx *gorm.DB) error    { return nil }

///////// hooks end

///////// CRUD start
// Add 新增
func (*Record) Add(o *Record) (*Record, error) {
	o.CreatedAt = time.Now()
	o.UpdateAt = o.CreatedAt
	err := config.MYSQL.Create(o).Error
	if err != nil {
		return nil, err
	}
	return o, nil
}

// Update 修改
func (*Record) Update(o *Record) (*Record, error) {
	err := config.MYSQL.Model(&Record{}).Where("id = ?", o.ID).Updates(o).Error
	// err := config.MYSQL.Model(&Record{}).Where("id = ?", o.ID).Save(o).Error
	if err != nil {
		return nil, err
	}
	return o, nil
}

// Count 查询数量
func (*Record) Count(cond *Condition) (int64, error) {
	var count int64
	db := config.MYSQL.Debug().Model(&Record{})
	db = db.Where("deleted_at is null")
	for _, v := range cond.Wheres {
		switch v.Method {
		case GT:
			db = db.Where(v.Field+" > ? ", v.Value)
		case GTE:
			db = db.Where(v.Field+" >= ? ", v.Value)
		case LT:
			db = db.Where(v.Field+" < ? ", v.Value)
		case LTE:
			db = db.Where(v.Field+" <= ? ", v.Value)
		case EQ:
			db = db.Where(v.Field+" = ? ", v.Value)
		case CONTAINS:
			db = db.Where(v.Field + " like '%" + v.Value + "%' ")
		}
	}
	err := db.Count(&count).Error
	if err != nil {
		return 0, err
	}
	return 0, nil
}

// Count 查询列表
func (*Record) List(cond *Condition) ([]*Record, error) {
	var datas = make([]*Record, 0)

	db := config.MYSQL.Model(&Record{})
	db = db.Where("deleted_at is null")
	// 条件
	for _, v := range cond.Wheres {
		switch v.Method {
		case GT:
			db = db.Where(v.Field+" > ? ", v.Value)
		case GTE:
			db = db.Where(v.Field+" >= ? ", v.Value)
		case LT:
			db = db.Where(v.Field+" < ? ", v.Value)
		case LTE:
			db = db.Where(v.Field+" <= ? ", v.Value)
		case EQ:
			db = db.Where(v.Field+" = ? ", v.Value)
		case CONTAINS:
			db = db.Where(v.Field + " like '%" + v.Value + "%' ")
		}
	}

	// 排序
	for _, v := range cond.Sorts {
		db = db.Order(fmt.Sprintf(" %s %s ", v.Field, v.Value))
	}

	// 分页
	db = db.Offset((cond.Page - 1) * cond.PageSize).Limit(cond.PageSize)

	// 查询
	err := db.Find(&datas).Error
	if err != nil {
		return nil, err
	}
	return datas, nil
}

// GetItemByID 根据id查询
func (*Record) GetItemByID(id int) (*Record, error) {
	var rec = Record{}
	db := config.MYSQL.Model(&Record{})
	db = db.Where("deleted_at is null")
	err := db.Where("id = ?", id).First(&rec).Error
	return &rec, err
}

// Delete 删除
func (*Record) Delete(id int) error {
	return config.MYSQL.Model(&Record{}).Where("id = ?", id).Update("deleted_at", time.Now()).Error
	// return config.MYSQL.Delete(&Record{}, id).Error
}

///////// CRUD end
